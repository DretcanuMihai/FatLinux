package com.map_toysocialnetworkgui.repository.with_db;

import com.map_toysocialnetworkgui.model.entities.Message;
import com.map_toysocialnetworkgui.repository.Repository;

import java.sql.*;
import java.time.LocalDateTime;
import java.util.*;

public class MessageDBRepository implements Repository<Integer, Message> {
    private final String url;
    private final String username;
    private final String password;

    public MessageDBRepository(String url, String username, String password) {
        this.url = url;
        this.username = username;
        this.password = password;
    }

    /**
     * extracts the current message from a ResultSet
     * @param resultSetMessages - said ResultSet
     * @return - said message
     * @throws SQLException - if any sql problems are present
     */
    private Message extractMessageFromResultSet(ResultSet resultSetMessages) throws SQLException {
        Integer id=resultSetMessages.getInt("message_id");
        String fromEmail=resultSetMessages.getString("sender_email");
        if(resultSetMessages.wasNull())
            fromEmail=null;
        List<String> toEmails=getReceiverEmailsOf(id);
        String messageText=resultSetMessages.getString("message_text");
        LocalDateTime sendTime=resultSetMessages.getTimestamp("send_time").toLocalDateTime();
        Integer repliedMessageId=resultSetMessages.getInt("parent_message_id");
        if(resultSetMessages.wasNull())
            repliedMessageId=null;
        return new Message(id,fromEmail,toEmails,messageText,sendTime,repliedMessageId);
    }

    /**
     * saves a delivery into the database
     * @param messageID - the delivered message's ID (must exist in the DB)
     * @param receiverEmail - the receiver's email (must exist in the DB)
     */
    private void saveDelivery(Integer messageID,String receiverEmail){
        String sqlInsertDelivery="INSERT INTO message_deliveries(message_id, receiver_email)  values (?,?)";
        try (Connection connection = DriverManager.getConnection(url, username, password)){
            PreparedStatement statementInsertDelivery = connection.prepareStatement(sqlInsertDelivery);
            statementInsertDelivery.setInt(1,messageID);
            statementInsertDelivery.setString(2,receiverEmail);
            statementInsertDelivery.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    /**
     * gets the message id generated by a given message insertion statement
     * @param statement - the insertion statement
     * @return - int representing the id
     * @throws SQLException - if there are any SQL problems
     */
    private int getMessageIDGeneratedBy(PreparedStatement statement) throws SQLException {
        ResultSet newKeys=statement.getGeneratedKeys();
        newKeys.next();
        return newKeys.getInt(1);
    }

    @Override
    public void save(Message message) {
        String sqlInsertMessage="INSERT INTO messages(sender_email, message_text, send_time, parent_message_id) " +
                "values (?,?,?,?)";
        try (Connection connection = DriverManager.getConnection(url, username, password);
             PreparedStatement statementInsertMessage = connection.prepareStatement(sqlInsertMessage,PreparedStatement.RETURN_GENERATED_KEYS)) {

            //saves everything except the list of receivers
            statementInsertMessage.setString(1,message.getFromEmail());
            statementInsertMessage.setString(2,message.getMessageText());
            statementInsertMessage.setTimestamp(3,Timestamp.valueOf(message.getSendTime()));
            if(message.getParentMessageId()!=null)
                statementInsertMessage.setInt(4,message.getParentMessageId());
            else
                statementInsertMessage.setNull(4, Types.INTEGER);

            statementInsertMessage.executeUpdate();

            //saves the list of receivers
            int id=getMessageIDGeneratedBy(statementInsertMessage);
            message.getToEmails().forEach(email-> saveDelivery(id,email));

        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    /**
     * gets the emails of the people who received the message with an id
     * @param id - said id
     * @return - a list of said emails
     */
    private List<String> getReceiverEmailsOf(Integer id){
        List<String> toEmails=new ArrayList<>();
        String sqlGetMessageDeliveries="SELECT * from message_deliveries where message_id=(?)";
        try (Connection connection = DriverManager.getConnection(url, username, password)){

            PreparedStatement statementGetMessageDeliveries = connection.prepareStatement(sqlGetMessageDeliveries);
            statementGetMessageDeliveries.setInt(1,id);
            ResultSet resultSetDeliveries = statementGetMessageDeliveries.executeQuery();
            while (resultSetDeliveries.next()) {
                    String toEmail=resultSetDeliveries.getString("receiver_email");
                    toEmails.add(toEmail);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return toEmails;
    }

    @Override
    public Message get(Integer id) {
        String sqlGetMessage="SELECT * from messages where message_id=(?)";
        Message message=null;
        try (Connection connection = DriverManager.getConnection(url, username, password)){

            PreparedStatement statementGetMessage = connection.prepareStatement(sqlGetMessage);
            statementGetMessage.setInt(1,id);

            ResultSet resultSetMessages = statementGetMessage.executeQuery();

            if (resultSetMessages.next()) {
                message=extractMessageFromResultSet(resultSetMessages);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return message;
    }

    /**
     * deletes all the deliveries of a given message
     * @param id - the message's id
     */
    private void deleteDeliveriesOf(Integer id){
        String sqlDeleteMessageDeliveries="DELETE from message_deliveries where message_id=(?)";
        try (Connection connection = DriverManager.getConnection(url, username, password)) {

            PreparedStatement statementDeleteMessageDeliveries= connection.prepareStatement(sqlDeleteMessageDeliveries);
            statementDeleteMessageDeliveries.setInt(1,id);
            statementDeleteMessageDeliveries.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    /**
     * updates the deliveries of a message in the database
     * @param message - said message - the new deliveries are taken from it
     */
    private void updateDeliveriesOf(Message message){
        deleteDeliveriesOf(message.getId());
        message.getToEmails().forEach(email-> saveDelivery(message.getId(),email));
    }

    @Override
    public void update(Message message) {
        String sqlUpdateMessage="UPDATE messages set sender_email=(?),message_text=(?),send_time=(?),parent_message_id=(?) where message_id=(?)";
        try (Connection connection = DriverManager.getConnection(url, username, password)) {

            PreparedStatement statementUpdateMessage = connection.prepareStatement(sqlUpdateMessage);

            statementUpdateMessage.setString(1,message.getFromEmail());
            statementUpdateMessage.setString(2,message.getMessageText());
            statementUpdateMessage.setTimestamp(3,Timestamp.valueOf(message.getSendTime()));
            if(message.getParentMessageId()==null)
                statementUpdateMessage.setNull(4,Types.INTEGER);
            else
                statementUpdateMessage.setInt(4,message.getParentMessageId());
            statementUpdateMessage.setInt(5,message.getId());
            statementUpdateMessage.executeUpdate();
            updateDeliveriesOf(message);

        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    @Override
    public void delete(Integer id) {
        String sqlMessages="DELETE from messages where message_id=(?)";
        try (Connection connection = DriverManager.getConnection(url, username, password)) {

            PreparedStatement statementMessages = connection.prepareStatement(sqlMessages);

            statementMessages.setInt(1,id);
            statementMessages.executeUpdate();

        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    @Override
    public Collection<Message> getAll() {
        Set<Message> messages=new HashSet<>();
        String sqlMessages="SELECT * from messages";
        try (Connection connection = DriverManager.getConnection(url, username, password)) {

            PreparedStatement statementMessages = connection.prepareStatement(sqlMessages);
            ResultSet resultSetMessages = statementMessages.executeQuery();

            while (resultSetMessages.next()) {
                Message message=extractMessageFromResultSet(resultSetMessages);
                messages.add(message);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return messages;
    }
}
