package com.map_toysocialnetworkgui.utils.cryptography;

import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.PBEKeySpec;
import javax.crypto.spec.SecretKeySpec;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.KeySpec;

/**
 * class for storing utility methods for cryptography
 */
public class CryptoUtils {
    /**
     * generates the IV (initial values/initial vector) of bytes (nonce == number once)
     *
     * @param numBytes - number of bytes that the vector will have
     * @return - said IV
     */
    public static byte[] getRandomNonce(int numBytes) {
        byte[] nonce = new byte[numBytes];
        new SecureRandom().nextBytes(nonce);
        return nonce;
    }

    /**
     * generates the secret AES key derived from a given password
     *
     * @param password - password used to generate the secret key
     * @param salt - randomly generated byte array for protection of the key
     * @return - said secret AES key
     * @throws NoSuchAlgorithmException - if the requested algorithm is not available
     * @throws InvalidKeySpecException - if the key specifications are invalid
     */
    public static SecretKey getAESKeyFromPassword(char[] password, byte[] salt)
            throws NoSuchAlgorithmException, InvalidKeySpecException {

        SecretKeyFactory factory = SecretKeyFactory.getInstance("PBKDF2WithHmacSHA256");
        KeySpec spec = new PBEKeySpec(password, salt, 65536, 256);
        return new SecretKeySpec(factory.generateSecret(spec).getEncoded(), "AES");
    }
}
